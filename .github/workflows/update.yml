name: Update README
on:
  issues: {}
jobs:
  update_readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Update README file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          node << 'EOF'
            const fs = require('fs')
            const { execSync } = require('child_process')
            const query = `query QueryIssues { 
              repository(owner: "dtinth", name: "github-actions-snippets") {
                issues(first: 100, labels: ["snippet"]) {
                  nodes {
                    title
                    author {
                      login
                    }
                    body
                    number
                    url
                    reactionGroups {
                      content
                      users {
                        totalCount
                      }
                    }
                  }
                }
              }
            }`
            const input = JSON.stringify({ query })
            const countReactions = (issue, name) => {
              const found = issue.reactionGroups.find(g => g.content === name)
              return found && found.users.totalCount || 0
            }
            const score = issue => {
              return countReactions(issue, 'THUMBS_UP') - countReactions(issue, 'THUMBS_DOWN')
            }
            const issues = JSON.parse(String(execSync(`curl -H "Authorization: Bearer ${process.env.GITHUB_TOKEN}" -X POST -d @- https://api.github.com/graphql`, { input })))
              .data.repository.issues.nodes
              .sort((a, b) => score(b) - score(a))
            const contents = issues
              .map(issue => {
                const m = issue.body.match(/^\s*(\w[^]*?\n```yaml\n[^]*?\n```)/)
                if (!m) return
                return {
                  title: issue.title,
                  body: m[1],
                  number: issue.number,
                  author: issue.author.login,
                  score: score(issue),
                }
              })
              .filter(row => row)
              .map(row => {
                return [
                  `# ${row.title}`,
                  `${row.body}`,
                ].join('\n')
              }).join('\n\n')
            console.log(contents)
          EOF
